#!/bin/bash
#==============================================================================#
# This file is part of the Yang software project. It is distributed under the
# MIT License. See LICENSE file for details.
#==============================================================================#
# Usage:
# ./deps.sh depfile buildfile file outdir make_link_deps
DEPFILE=$1
BUILDFILE=$2
FILE=$3
OUTDIR=$4
MAKE_LINK_DEPS=$5

# Deduplicate and filter one list by another.
dedup() {
  NEW=""
  ANY=1
  for X in $1; do
    echo "$2 $NEW" | fgrep $X > /dev/null
    if [ $? -ne 0 ]; then
      NEW="$NEW $X"
      ANY=0
    fi
  done

  echo $NEW
  return $ANY
}

# Get include dependencies from a single file.
get_deps() {
  DIR=$(dirname $1)
  # Extract the filenames in lines that look like:
  #   #include "foo.h"
  LIST=$( \
      grep -ho '^#include \+\"[^"]\+\"' $1 | \
      sed "s/#include \+\"\([^\"]\+\)\"/\1/g")

  DEPS=""
  for DEP in $LIST; do
    # Prefix directory and collapse pathname.
    DEP=$(
        echo "$DIR/$DEP" | \
        sed ":repeat; s/[^/]\+\/\(\.\.\/\)*\.\.\//\1/; t repeat")

    if [ -f $DEP ]; then
      DEPS="$DEPS $DEP"
    fi
  done

  echo $DEPS
}

# Get dependencies from a set of files that are not contained in a list of
# known dependencies.
get_new_deps() {
  # Find dependencies in first list.
  DEPS=""
  for FILE in $1; do
    T=$(get_deps $FILE)
    DEPS="$DEPS $T"
  done

  R=$(dedup "$DEPS" "$2")
  V=$?
  echo $R
  return $V
}

# Get corresponding source files that are not contained in a list of known
# source files.
get_source_files() {
  SOURCES=""
  for FILE in $1; do
    BASE="${FILE%.*}"
    if [ -f $BASE.cc ]; then
      SOURCES="$SOURCES $BASE.cc"
    fi
    if [ -f $BASE.cpp ]; then
      SOURCES="$SOURCES $BASE.cpp"
    fi
  done

  R=$(dedup "$SOURCES" "$2")
  V=$?
  echo $R
  return $V
}

# Extract include deps until we have them all.
DEPS=""
NEW_DEPS="$FILE"
ANY=0
while [ $ANY -eq 0 ]; do
  DEPS="$DEPS $NEW_DEPS"
  NEW_DEPS=$(get_new_deps "$NEW_DEPS" "$DEPS")
  ANY=$?
done

# Write dependency file. The .BUILD target depends on the corresponding file and
# its include dependencies. We use double-colon rules to suppress target
# override warnings.
echo -e "$BUILDFILE::$DEPS\n\t@touch $BUILDFILE" > $DEPFILE

if [ $MAKE_LINK_DEPS -ne 0 ]; then
  exit
fi

# Extract link deps.
LINK_DEPS=""
NEW_DEPS=$DEPS
ANY=0
while [ $ANY -eq 0 ]; do
  LINK_DEPS="$LINK_DEPS $NEW_DEPS"

  T=$(get_source_files "$NEW_DEPS" "$LINK_DEPS")
  LINK_ANY=$?

  U=$(get_new_deps "$NEW_DEPS" "$LINK_DEPS")
  INCLUDE_ANY=$?

  NEW_DEPS="$T $U"
  let ANY="$LINK_ANY * $INCLUDE_ANY"
done

OBJECT_DEPS=""
for LINK in $LINK_DEPS; do
  echo "$LINK" | egrep '.cc$|.cpp$' > /dev/null
  if [ $? -eq 0 ]; then
    OBJECT_DEPS="$OBJECT_DEPS $OUTDIR/$LINK.o"
  fi
done

# Write list of corresponding object files to a variable for linking.
VAR=${FILE//\//_}
echo -e "${VAR//./_}_LINK=$OBJECT_DEPS" >> $DEPFILE
